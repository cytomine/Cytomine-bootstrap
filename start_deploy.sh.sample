#!/bin/bash

#
# Copyright (c) 2009-2020. Authors: see NOTICE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

docker create --name memcached \
--restart=unless-stopped \
cytomine/memcached:v1.2.0 > /dev/null

docker cp $PWD/configs/memcached/memcached.conf memcached:/etc/memcached.conf
docker start memcached


docker create --name rabbitmq \
-p 5672:5672 -p 15672:15672 \
-e RABBITMQ_PASS=$RABBITMQ_PASS \
--restart=unless-stopped \
cytomine/rabbitmq:v1.2.0 > /dev/null

docker start rabbitmq


docker volume create --name postgis_data > /dev/null
# create database docker
docker run -d -m 8g --name postgresql -v postgis_data:/var/lib/postgresql \
--restart=unless-stopped \
cytomine/postgis:v2.1.0 > /dev/null

docker volume create --name mongodb_data > /dev/null
# create mongodb docker
docker run -d --name mongodb -v mongodb_data:/data/db \
-e MONGO_INITDB_ROOT_USERNAME=mongoadmin  \
-e MONGO_INITDB_ROOT_PASSWORD=secret  \
-e MONGO_INITDB_DATABASE=cytomine  \
--restart=unless-stopped \
mongo:4.4 > /dev/null


if [ ! -e $PWD/configs/software_router/keys/ssh_key ]
then
    echo "ssh keys for software_router must exists !"
    echo "generate them and put them in the $PWD/configs/software_router/keys folder "
    exit 1
fi


docker volume create --name slurm_data > /dev/null
# create slurm docker
docker create --name slurm \
--privileged \
-h cytomine-slurm \
-v slurm_data:/var/lib/mysql \
-v singularity_images:/data/softwares/images \
-v /etc/localtime:/etc/localtime \
--restart=unless-stopped \
cytomine/slurm:v1.1.0 > /dev/null

docker cp $PWD/configs/software_router/keys/ssh_key.pub slurm:/home/cytomine/.ssh/authorized_keys
docker cp $PWD/hosts/slurm/addHosts.sh slurm:/tmp/addHosts.sh
docker start slurm
docker exec -it slurm chown cytomine:cytomine /home/cytomine/.ssh/authorized_keys
docker exec -it slurm chmod 600 /home/cytomine/.ssh/authorized_keys

docker create --name bioformat \
-v $IMS_STORAGE_PATH:$IMS_STORAGE_PATH \
-e BIOFORMAT_PORT=$BIOFORMAT_PORT \
--restart=unless-stopped \
cytomine/bioformat:v1.2.0 > /dev/null

docker start bioformat

docker create --name pims \
--link rabbitmq:rabbitmq \
-e WEB_CONCURRENCY="1" \
-v /data/images:/data/images \
-v /data/images/_buffer:/tmp/uploaded \
--restart=unless-stopped \
cytomine/pims:v0.12.4 > /dev/null

docker cp "${PWD}/configs/pims/pims-config.env" pims:/app/pims-config.env
docker cp "${PWD}/hosts/pims/addHosts.sh" pims:/tmp/addHosts.sh
docker start pims

docker create --name core \
--link postgresql:postgresql \
--link mongodb:mongodb \
--link rabbitmq:rabbitmq \
-v /etc/localtime:/etc/localtime \
-v $UPLOADED_SOFTWARES_PATH:/data/softwares/code \
-v javamelody-core:/javamelody-core \
--restart=unless-stopped \
-h core \
cytomine/core:v4.1.0-beta.1 > /dev/null

docker cp $PWD/configs/core/application.yml core:/app/application.yml
docker cp $PWD/configs/core/logback.yml core:/app/logback.yml
docker cp $PWD/hosts/core/addHosts.sh core:/tmp/addHosts.sh
docker start core


docker create --name web_UI \
-v /etc/localtime:/etc/localtime \
--restart=unless-stopped \
cytomine/web_ui:v2.2.0-beta.4 > /dev/null

docker cp "${PWD}/configs/web_ui/configuration.json" web_UI:/app/configuration.json
docker cp "${PWD}/configs/web_ui/nginx.conf" web_UI:/etc/nginx/nginx.conf
docker start web_UI


docker create --name nginx \
--link pims:pims \
--link core:core \
--link web_UI:web_UI \
-v $IMS_BUFFER_PATH:/tmp/uploaded \
-p 80:80 \
--restart=unless-stopped \
cytomine/nginx:v1.4.0 > /dev/null

docker cp $PWD/configs/nginx/nginx.conf nginx:/usr/local/nginx/conf/nginx.conf
docker start nginx


docker create --name software_router \
-v singularity_images:/data/softwares/images \
-v /var/run/docker.sock:/var/run/docker.sock \
--privileged \
--link rabbitmq:rabbitmq \
--link slurm:slurm \
--restart=unless-stopped \
cytomine/software_router:v2.1.0 > /dev/null

docker cp $PWD/hosts/software_router/addHosts.sh software_router:/tmp/addHosts.sh
docker cp $PWD/configs/software_router/config.groovy software_router:/software_router/config.groovy
docker cp $PWD/configs/software_router/keys/ssh_key software_router:/root/.ssh/id_rsa
docker start software_router
docker exec -it software_router chmod 600 /root/.ssh/id_rsa


